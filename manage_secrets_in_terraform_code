provider "aws" {
  region = "us-east-1"
}

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.64"
    }
  }
}

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "4.0.1"

  name = "main"
  cidr = "10.0.0.0/16"

  azs             = ["us-east-1a", "us-east-1b"]
  private_subnets = ["10.0.0.0/19", "10.0.32.0/19"]
  public_subnets  = ["10.0.64.0/19", "10.0.96.0/19"]

  enable_dns_hostnames = true
  enable_dns_support   = true

  enable_nat_gateway     = true
  single_nat_gateway     = true
  one_nat_gateway_per_az = false
}

resource "aws_db_subnet_group" "public" {
  name       = "public"
  subnet_ids = module.vpc.public_subnets
}

resource "aws_db_instance" "mydb" {
  db_name           = "mydb"
  engine            = "postgres"
  engine_version    = "15"
  instance_class    = "db.t4g.micro"
  allocated_storage = 10

  publicly_accessible  = true
  skip_final_snapshot  = true
  db_subnet_group_name = aws_db_subnet_group.public.name

  username = "root"
  password = "devops123"
}

#1 is to use terraform variables. ------------------------------
# use one space to not save command in bash command history.
# export TF_VAR_username="root"
# export TF_VAR_password="devops123"
variable "username" {
  description = "Username for the master user"
  type        = string
  sensitive   = true
}

variable "password" {
  description = "Password for the master user"
  type        = string
  sensitive   = true
}

#1 end --------------------------------------------------


#2 Use tools that can encrypt ENV variables.
#https://www.passwordstore.org/
#sudo apt-get install pass
#gpg --gen-key
#pass init <pub_key>
#pass insert db_username
#pass insert db_password
#2 end --------------------------------------------------


#3 User AWS Key Management service -----------------------
#Create a secret file
cat << EOF > db-secret.yaml
---
username: root
password: devops123
EOF
#Create a KMS Key in aws. Customer managed Key.
#Make sure to use same user that runs terraform code.
#cd into the directory.
#https://docs.aws.amazon.com/cli/latest/reference/kms/encrypt.html
aws kms encrypt \
    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \
    --region us-east-1
    --plaintext fileb://db-creds.yaml \
    --output text \
    --query CiphertextBlob > db-creds.yaml.encrypted
#change 3-rds.tf to 
data "aws_kms_secrets" "creds" {
  secret {
    name    = "db"
    payload = file("${path.module}/db-creds.yml.encrypted")
  }
}

locals {
  db_creds = yamldecode(data.aws_kms_secrets.creds.plaintext["db"])
}

resource "aws_db_instance" "mydb" {
  db_name           = "mydb"
  engine            = "postgres"
  engine_version    = "15"
  instance_class    = "db.t4g.micro"
  allocated_storage = 10

  publicly_accessible  = true
  skip_final_snapshot  = true
  db_subnet_group_name = aws_db_subnet_group.public.name

  username = local.db_creds.username
  password = local.db_creds.password
}

#3 end -------------------------------------------------------------

#4 Use sops https://github.com/getsops/sops  -------------------------
#sops --kms <arn_of_kms_key_created_in_aws> db-creds.yaml
# past username and password
#a file will be created with encrypted data.
---
username: root
password: devops123
#create a file teragrunt.hcl
terraform {
  source = "../2-part"
}

locals {
  db_creds = yamldecode(sops_decrypt_file(("db-creds.yml")))
}

inputs = {
  username = local.db_creds.username
  password = local.db_creds.password
}

#terragrunt init, then terragrunt apply

#4 AWS secret manager ----------------------------------------------------
#Create a plain text AWS secret  
{
  "username": "root",
  "password": "devops123"
}

#give it a name and save it.
data "aws_secretsmanager_secret_version" "creds" {
  secret_id = "db-creds-v2"
}

locals {
  db_creds = jsondecode(
    data.aws_secretsmanager_secret_version.creds.secret_string
  )
}

resource "aws_db_instance" "mydb" {
  db_name           = "mydb"
  engine            = "postgres"
  engine_version    = "15"
  instance_class    = "db.t4g.micro"
  allocated_storage = 10

  publicly_accessible  = true
  skip_final_snapshot  = true
  db_subnet_group_name = aws_db_subnet_group.public.name

  username = local.db_creds.username
  password = local.db_creds.password
}

#4 end ------------------------------------------------------------------------

